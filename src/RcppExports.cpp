// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// calculateXXw
void calculateXXw(arma::mat X, arma::vec w, arma::vec& ret);
RcppExport SEXP _testxyz1_calculateXXw(SEXP XSEXP, SEXP wSEXP, SEXP retSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type w(wSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type ret(retSEXP);
    calculateXXw(X, w, ret);
    return R_NilValue;
END_RCPP
}
// maxLambda
double maxLambda(arma::colvec g_start);
RcppExport SEXP _testxyz1_maxLambda(SEXP g_startSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::colvec >::type g_start(g_startSEXP);
    rcpp_result_gen = Rcpp::wrap(maxLambda(g_start));
    return rcpp_result_gen;
END_RCPP
}
// evaluate
double evaluate(arma::mat X, arma::vec y, arma::vec z, double lambda);
RcppExport SEXP _testxyz1_evaluate(SEXP XSEXP, SEXP ySEXP, SEXP zSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type z(zSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(evaluate(X, y, z, lambda));
    return rcpp_result_gen;
END_RCPP
}
// vunion
arma::uvec vunion(const arma::uvec& first, const arma::uvec& second);
RcppExport SEXP _testxyz1_vunion(SEXP firstSEXP, SEXP secondSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::uvec& >::type first(firstSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type second(secondSEXP);
    rcpp_result_gen = Rcpp::wrap(vunion(first, second));
    return rcpp_result_gen;
END_RCPP
}
// vintersection
arma::uvec vintersection(const arma::uvec& first, const arma::uvec& second);
RcppExport SEXP _testxyz1_vintersection(SEXP firstSEXP, SEXP secondSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::uvec& >::type first(firstSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type second(secondSEXP);
    rcpp_result_gen = Rcpp::wrap(vintersection(first, second));
    return rcpp_result_gen;
END_RCPP
}
// vdifference
arma::uvec vdifference(const arma::uvec& first, const arma::uvec& second);
RcppExport SEXP _testxyz1_vdifference(SEXP firstSEXP, SEXP secondSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::uvec& >::type first(firstSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type second(secondSEXP);
    rcpp_result_gen = Rcpp::wrap(vdifference(first, second));
    return rcpp_result_gen;
END_RCPP
}
// findActiveSet
void findActiveSet(arma::vec& g, arma::vec& z, arma::uvec& A);
RcppExport SEXP _testxyz1_findActiveSet(SEXP gSEXP, SEXP zSEXP, SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type g(gSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type z(zSEXP);
    Rcpp::traits::input_parameter< arma::uvec& >::type A(ASEXP);
    findActiveSet(g, z, A);
    return R_NilValue;
END_RCPP
}
// sparsify
void sparsify(arma::vec& w, arma::vec& u, arma::vec& l);
RcppExport SEXP _testxyz1_sparsify(SEXP wSEXP, SEXP uSEXP, SEXP lSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type w(wSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type u(uSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type l(lSEXP);
    sparsify(w, u, l);
    return R_NilValue;
END_RCPP
}
// projectAndSparsify
void projectAndSparsify(arma::vec& w, arma::vec& u, arma::vec& l);
RcppExport SEXP _testxyz1_projectAndSparsify(SEXP wSEXP, SEXP uSEXP, SEXP lSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type w(wSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type u(uSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type l(lSEXP);
    projectAndSparsify(w, u, l);
    return R_NilValue;
END_RCPP
}
// aggressiveStep
double aggressiveStep(const arma::uvec& A, const arma::vec& eta, arma::vec& z, const arma::vec& delz_A, const arma::vec& Kz, const arma::vec& Ku);
RcppExport SEXP _testxyz1_aggressiveStep(SEXP ASEXP, SEXP etaSEXP, SEXP zSEXP, SEXP delz_ASEXP, SEXP KzSEXP, SEXP KuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::uvec& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type z(zSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type delz_A(delz_ASEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Kz(KzSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Ku(KuSEXP);
    rcpp_result_gen = Rcpp::wrap(aggressiveStep(A, eta, z, delz_A, Kz, Ku));
    return rcpp_result_gen;
END_RCPP
}
// conservativeStep
double conservativeStep(const arma::uvec& A, arma::vec& z, const arma::vec& delz_A);
RcppExport SEXP _testxyz1_conservativeStep(SEXP ASEXP, SEXP zSEXP, SEXP delz_ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::uvec& >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type z(zSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type delz_A(delz_ASEXP);
    rcpp_result_gen = Rcpp::wrap(conservativeStep(A, z, delz_A));
    return rcpp_result_gen;
END_RCPP
}
// update
bool update(arma::vec& z, const arma::uvec& A, const arma::vec& delz_A, const arma::vec& Kz, const arma::vec& Ku, const arma::vec& eta);
RcppExport SEXP _testxyz1_update(SEXP zSEXP, SEXP ASEXP, SEXP delz_ASEXP, SEXP KzSEXP, SEXP KuSEXP, SEXP etaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type z(zSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type delz_A(delz_ASEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Kz(KzSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Ku(KuSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type eta(etaSEXP);
    rcpp_result_gen = Rcpp::wrap(update(z, A, delz_A, Kz, Ku, eta));
    return rcpp_result_gen;
END_RCPP
}
// solve
size_t solve(arma::mat X, arma::vec g_start, int n, arma::vec& z, arma::vec& g, double lambda, arma::uvec& whitelisted, size_t max_iterations);
RcppExport SEXP _testxyz1_solve(SEXP XSEXP, SEXP g_startSEXP, SEXP nSEXP, SEXP zSEXP, SEXP gSEXP, SEXP lambdaSEXP, SEXP whitelistedSEXP, SEXP max_iterationsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type g_start(g_startSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type z(zSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type g(gSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< arma::uvec& >::type whitelisted(whitelistedSEXP);
    Rcpp::traits::input_parameter< size_t >::type max_iterations(max_iterationsSEXP);
    rcpp_result_gen = Rcpp::wrap(solve(X, g_start, n, z, g, lambda, whitelisted, max_iterations));
    return rcpp_result_gen;
END_RCPP
}
// sequential_solve
size_t sequential_solve(arma::mat X, int n, arma::vec& z, arma::vec g_start, arma::uvec& ever_active, double lambda, double prev_lambda, size_t max_iterations);
RcppExport SEXP _testxyz1_sequential_solve(SEXP XSEXP, SEXP nSEXP, SEXP zSEXP, SEXP g_startSEXP, SEXP ever_activeSEXP, SEXP lambdaSEXP, SEXP prev_lambdaSEXP, SEXP max_iterationsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type z(zSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type g_start(g_startSEXP);
    Rcpp::traits::input_parameter< arma::uvec& >::type ever_active(ever_activeSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type prev_lambda(prev_lambdaSEXP);
    Rcpp::traits::input_parameter< size_t >::type max_iterations(max_iterationsSEXP);
    rcpp_result_gen = Rcpp::wrap(sequential_solve(X, n, z, g_start, ever_active, lambda, prev_lambda, max_iterations));
    return rcpp_result_gen;
END_RCPP
}
// FibCpp0
std::vector<int> FibCpp0(int n);
RcppExport SEXP _testxyz1_FibCpp0(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(FibCpp0(n));
    return rcpp_result_gen;
END_RCPP
}
// findIndex
IntegerVector findIndex(NumericVector array, double value);
RcppExport SEXP _testxyz1_findIndex(SEXP arraySEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type array(arraySEXP);
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(findIndex(array, value));
    return rcpp_result_gen;
END_RCPP
}
// binaryToInt
IntegerVector binaryToInt(NumericMatrix matrix);
RcppExport SEXP _testxyz1_binaryToInt(SEXP matrixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type matrix(matrixSEXP);
    rcpp_result_gen = Rcpp::wrap(binaryToInt(matrix));
    return rcpp_result_gen;
END_RCPP
}
// sorted_index_vector
IntegerVector sorted_index_vector(NumericVector v);
RcppExport SEXP _testxyz1_sorted_index_vector(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(sorted_index_vector(v));
    return rcpp_result_gen;
END_RCPP
}
// apply_permutation
NumericVector apply_permutation(NumericVector vec, IntegerVector p);
RcppExport SEXP _testxyz1_apply_permutation(SEXP vecSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type vec(vecSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(apply_permutation(vec, p));
    return rcpp_result_gen;
END_RCPP
}
// combine
NumericVector combine(NumericVector x, NumericVector y);
RcppExport SEXP _testxyz1_combine(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(combine(x, y));
    return rcpp_result_gen;
END_RCPP
}
// push
void push(IntegerMatrix M, IntegerVector new_vector);
RcppExport SEXP _testxyz1_push(SEXP MSEXP, SEXP new_vectorSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type M(MSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type new_vector(new_vectorSEXP);
    push(M, new_vector);
    return R_NilValue;
END_RCPP
}
// find
List find(IntegerVector v, int k);
RcppExport SEXP _testxyz1_find(SEXP vSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type v(vSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(find(v, k));
    return rcpp_result_gen;
END_RCPP
}
// pair_search3
IntegerVector pair_search3(NumericVector x, NumericVector y);
RcppExport SEXP _testxyz1_pair_search3(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(pair_search3(x, y));
    return rcpp_result_gen;
END_RCPP
}
// findindexit
int findindexit(IntegerVector vec, double n);
RcppExport SEXP _testxyz1_findindexit(SEXP vecSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type vec(vecSEXP);
    Rcpp::traits::input_parameter< double >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(findindexit(vec, n));
    return rcpp_result_gen;
END_RCPP
}
// binarySearchIndex
int binarySearchIndex(IntegerVector v, int n);
RcppExport SEXP _testxyz1_binarySearchIndex(SEXP vSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type v(vSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(binarySearchIndex(v, n));
    return rcpp_result_gen;
END_RCPP
}
// pair_search6
List pair_search6(NumericVector x, IntegerVector sorted_indexes);
RcppExport SEXP _testxyz1_pair_search6(SEXP xSEXP, SEXP sorted_indexesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type sorted_indexes(sorted_indexesSEXP);
    rcpp_result_gen = Rcpp::wrap(pair_search6(x, sorted_indexes));
    return rcpp_result_gen;
END_RCPP
}
// pair_search7
List pair_search7(NumericVector x, IntegerVector sorted_indexes);
RcppExport SEXP _testxyz1_pair_search7(SEXP xSEXP, SEXP sorted_indexesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type sorted_indexes(sorted_indexesSEXP);
    rcpp_result_gen = Rcpp::wrap(pair_search7(x, sorted_indexes));
    return rcpp_result_gen;
END_RCPP
}
// groupt
List groupt(IntegerVector list, IntegerVector sorted, int n1);
RcppExport SEXP _testxyz1_groupt(SEXP listSEXP, SEXP sortedSEXP, SEXP n1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type list(listSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type sorted(sortedSEXP);
    Rcpp::traits::input_parameter< int >::type n1(n1SEXP);
    rcpp_result_gen = Rcpp::wrap(groupt(list, sorted, n1));
    return rcpp_result_gen;
END_RCPP
}
// splitVectors
List splitVectors(ListOf<IntegerVector> inputList, int n);
RcppExport SEXP _testxyz1_splitVectors(SEXP inputListSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ListOf<IntegerVector> >::type inputList(inputListSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(splitVectors(inputList, n));
    return rcpp_result_gen;
END_RCPP
}
// group2
List group2(IntegerVector list, IntegerVector sorted, int n1);
RcppExport SEXP _testxyz1_group2(SEXP listSEXP, SEXP sortedSEXP, SEXP n1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type list(listSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type sorted(sortedSEXP);
    Rcpp::traits::input_parameter< int >::type n1(n1SEXP);
    rcpp_result_gen = Rcpp::wrap(group2(list, sorted, n1));
    return rcpp_result_gen;
END_RCPP
}
// pair_search4
List pair_search4(NumericVector x, NumericVector y);
RcppExport SEXP _testxyz1_pair_search4(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(pair_search4(x, y));
    return rcpp_result_gen;
END_RCPP
}
// test4
List test4(NumericVector x, IntegerVector sorted_indexes);
RcppExport SEXP _testxyz1_test4(SEXP xSEXP, SEXP sorted_indexesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type sorted_indexes(sorted_indexesSEXP);
    rcpp_result_gen = Rcpp::wrap(test4(x, sorted_indexes));
    return rcpp_result_gen;
END_RCPP
}
// expandGrid
IntegerMatrix expandGrid(IntegerVector vec1, IntegerVector vec2);
RcppExport SEXP _testxyz1_expandGrid(SEXP vec1SEXP, SEXP vec2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type vec1(vec1SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type vec2(vec2SEXP);
    rcpp_result_gen = Rcpp::wrap(expandGrid(vec1, vec2));
    return rcpp_result_gen;
END_RCPP
}
// pair_search8
IntegerMatrix pair_search8(NumericVector x, NumericVector y);
RcppExport SEXP _testxyz1_pair_search8(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(pair_search8(x, y));
    return rcpp_result_gen;
END_RCPP
}
// test3
IntegerMatrix test3(NumericVector x, IntegerVector sorted_indexes);
RcppExport SEXP _testxyz1_test3(SEXP xSEXP, SEXP sorted_indexesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type sorted_indexes(sorted_indexesSEXP);
    rcpp_result_gen = Rcpp::wrap(test3(x, sorted_indexes));
    return rcpp_result_gen;
END_RCPP
}
// cantor_map
NumericVector cantor_map(NumericMatrix pairs);
RcppExport SEXP _testxyz1_cantor_map(SEXP pairsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type pairs(pairsSEXP);
    rcpp_result_gen = Rcpp::wrap(cantor_map(pairs));
    return rcpp_result_gen;
END_RCPP
}
// inverse_cantor_map
NumericMatrix inverse_cantor_map(NumericVector values);
RcppExport SEXP _testxyz1_inverse_cantor_map(SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type values(valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(inverse_cantor_map(values));
    return rcpp_result_gen;
END_RCPP
}
// normalizeL1
NumericVector normalizeL1(NumericVector vec);
RcppExport SEXP _testxyz1_normalizeL1(SEXP vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type vec(vecSEXP);
    rcpp_result_gen = Rcpp::wrap(normalizeL1(vec));
    return rcpp_result_gen;
END_RCPP
}
// transformY
NumericVector transformY(NumericVector vec);
RcppExport SEXP _testxyz1_transformY(SEXP vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type vec(vecSEXP);
    rcpp_result_gen = Rcpp::wrap(transformY(vec));
    return rcpp_result_gen;
END_RCPP
}
// uniformSampling
List uniformSampling(NumericMatrix X, NumericVector Y, int p, int k);
RcppExport SEXP _testxyz1_uniformSampling(SEXP XSEXP, SEXP YSEXP, SEXP pSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Y(YSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(uniformSampling(X, Y, p, k));
    return rcpp_result_gen;
END_RCPP
}
// weightedSampling
List weightedSampling(NumericMatrix X, NumericVector Y, int p, int k);
RcppExport SEXP _testxyz1_weightedSampling(SEXP XSEXP, SEXP YSEXP, SEXP pSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Y(YSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(weightedSampling(X, Y, p, k));
    return rcpp_result_gen;
END_RCPP
}
// getunique
NumericMatrix getunique(NumericMatrix combined);
RcppExport SEXP _testxyz1_getunique(SEXP combinedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type combined(combinedSEXP);
    rcpp_result_gen = Rcpp::wrap(getunique(combined));
    return rcpp_result_gen;
END_RCPP
}
// hadamard
NumericVector hadamard(NumericVector x, NumericVector y);
RcppExport SEXP _testxyz1_hadamard(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(hadamard(x, y));
    return rcpp_result_gen;
END_RCPP
}
// inner_product
double inner_product(NumericVector x, NumericVector y);
RcppExport SEXP _testxyz1_inner_product(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(inner_product(x, y));
    return rcpp_result_gen;
END_RCPP
}
// filter
NumericMatrix filter(NumericMatrix pairs, NumericMatrix X, NumericVector Y, double threshold);
RcppExport SEXP _testxyz1_filter(SEXP pairsSEXP, SEXP XSEXP, SEXP YSEXP, SEXP thresholdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type pairs(pairsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Y(YSEXP);
    Rcpp::traits::input_parameter< double >::type threshold(thresholdSEXP);
    rcpp_result_gen = Rcpp::wrap(filter(pairs, X, Y, threshold));
    return rcpp_result_gen;
END_RCPP
}
// generate_uniform_values
NumericVector generate_uniform_values(int n, double a, double b);
RcppExport SEXP _testxyz1_generate_uniform_values(SEXP nSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(generate_uniform_values(n, a, b));
    return rcpp_result_gen;
END_RCPP
}
// generate_random_projection
NumericVector generate_random_projection(int n, int M, bool with_replacement);
RcppExport SEXP _testxyz1_generate_random_projection(SEXP nSEXP, SEXP MSEXP, SEXP with_replacementSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< bool >::type with_replacement(with_replacementSEXP);
    rcpp_result_gen = Rcpp::wrap(generate_random_projection(n, M, with_replacement));
    return rcpp_result_gen;
END_RCPP
}
// binary_search_cpp
bool binary_search_cpp(NumericVector arr, double target);
RcppExport SEXP _testxyz1_binary_search_cpp(SEXP arrSEXP, SEXP targetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type arr(arrSEXP);
    Rcpp::traits::input_parameter< double >::type target(targetSEXP);
    rcpp_result_gen = Rcpp::wrap(binary_search_cpp(arr, target));
    return rcpp_result_gen;
END_RCPP
}
// interaction_strength
double interaction_strength(NumericMatrix X, NumericVector Y, int j, int k);
RcppExport SEXP _testxyz1_interaction_strength(SEXP XSEXP, SEXP YSEXP, SEXP jSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Y(YSEXP);
    Rcpp::traits::input_parameter< int >::type j(jSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(interaction_strength(X, Y, j, k));
    return rcpp_result_gen;
END_RCPP
}
// find_pair_matches
NumericMatrix find_pair_matches(IntegerVector x0, IntegerVector z0);
RcppExport SEXP _testxyz1_find_pair_matches(SEXP x0SEXP, SEXP z0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type z0(z0SEXP);
    rcpp_result_gen = Rcpp::wrap(find_pair_matches(x0, z0));
    return rcpp_result_gen;
END_RCPP
}
// find_pair_matches2
NumericMatrix find_pair_matches2(IntegerVector x0, IntegerVector z0);
RcppExport SEXP _testxyz1_find_pair_matches2(SEXP x0SEXP, SEXP z0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type z0(z0SEXP);
    rcpp_result_gen = Rcpp::wrap(find_pair_matches2(x0, z0));
    return rcpp_result_gen;
END_RCPP
}
// strongest_pairs
IntegerMatrix strongest_pairs(NumericMatrix X, NumericVector Y, int M, int L, int gamma);
RcppExport SEXP _testxyz1_strongest_pairs(SEXP XSEXP, SEXP YSEXP, SEXP MSEXP, SEXP LSEXP, SEXP gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Y(YSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< int >::type L(LSEXP);
    Rcpp::traits::input_parameter< int >::type gamma(gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(strongest_pairs(X, Y, M, L, gamma));
    return rcpp_result_gen;
END_RCPP
}
// strongest_pairs_binary
NumericMatrix strongest_pairs_binary(NumericMatrix X, NumericVector Y);
RcppExport SEXP _testxyz1_strongest_pairs_binary(SEXP XSEXP, SEXP YSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Y(YSEXP);
    rcpp_result_gen = Rcpp::wrap(strongest_pairs_binary(X, Y));
    return rcpp_result_gen;
END_RCPP
}
// cut
std::vector<double> cut(const std::vector<double>& input_vec);
RcppExport SEXP _testxyz1_cut(SEXP input_vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double>& >::type input_vec(input_vecSEXP);
    rcpp_result_gen = Rcpp::wrap(cut(input_vec));
    return rcpp_result_gen;
END_RCPP
}
// generateMatrix
NumericMatrix generateMatrix(int n, int p);
RcppExport SEXP _testxyz1_generateMatrix(SEXP nSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(generateMatrix(n, p));
    return rcpp_result_gen;
END_RCPP
}
// random_binary_matrix
NumericMatrix random_binary_matrix(int n, int p);
RcppExport SEXP _testxyz1_random_binary_matrix(SEXP nSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(random_binary_matrix(n, p));
    return rcpp_result_gen;
END_RCPP
}
// random_binary_vector
NumericVector random_binary_vector(int n);
RcppExport SEXP _testxyz1_random_binary_vector(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(random_binary_vector(n));
    return rcpp_result_gen;
END_RCPP
}
// go
NumericVector go(int n, int p);
RcppExport SEXP _testxyz1_go(SEXP nSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(go(n, p));
    return rcpp_result_gen;
END_RCPP
}
// r
NumericVector r(int n, int minValue, int maxValue);
RcppExport SEXP _testxyz1_r(SEXP nSEXP, SEXP minValueSEXP, SEXP maxValueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type minValue(minValueSEXP);
    Rcpp::traits::input_parameter< int >::type maxValue(maxValueSEXP);
    rcpp_result_gen = Rcpp::wrap(r(n, minValue, maxValue));
    return rcpp_result_gen;
END_RCPP
}
// rs
IntegerVector rs(int n, int minValue, int maxValue);
RcppExport SEXP _testxyz1_rs(SEXP nSEXP, SEXP minValueSEXP, SEXP maxValueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type minValue(minValueSEXP);
    Rcpp::traits::input_parameter< int >::type maxValue(maxValueSEXP);
    rcpp_result_gen = Rcpp::wrap(rs(n, minValue, maxValue));
    return rcpp_result_gen;
END_RCPP
}
// makeZ
IntegerMatrix makeZ(IntegerMatrix X, IntegerVector Y);
RcppExport SEXP _testxyz1_makeZ(SEXP XSEXP, SEXP YSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type Y(YSEXP);
    rcpp_result_gen = Rcpp::wrap(makeZ(X, Y));
    return rcpp_result_gen;
END_RCPP
}
// equalpairs
IntegerMatrix equalpairs(NumericVector u, NumericVector v, IntegerVector ou, IntegerVector ov, int max_number_of_pairs);
RcppExport SEXP _testxyz1_equalpairs(SEXP uSEXP, SEXP vSEXP, SEXP ouSEXP, SEXP ovSEXP, SEXP max_number_of_pairsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type u(uSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type v(vSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type ou(ouSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type ov(ovSEXP);
    Rcpp::traits::input_parameter< int >::type max_number_of_pairs(max_number_of_pairsSEXP);
    rcpp_result_gen = Rcpp::wrap(equalpairs(u, v, ou, ov, max_number_of_pairs));
    return rcpp_result_gen;
END_RCPP
}
// equalpairs2
IntegerMatrix equalpairs2(NumericVector u, NumericVector v, IntegerVector ou, IntegerVector ov, int max_number_of_pairs);
RcppExport SEXP _testxyz1_equalpairs2(SEXP uSEXP, SEXP vSEXP, SEXP ouSEXP, SEXP ovSEXP, SEXP max_number_of_pairsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type u(uSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type v(vSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type ou(ouSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type ov(ovSEXP);
    Rcpp::traits::input_parameter< int >::type max_number_of_pairs(max_number_of_pairsSEXP);
    rcpp_result_gen = Rcpp::wrap(equalpairs2(u, v, ou, ov, max_number_of_pairs));
    return rcpp_result_gen;
END_RCPP
}
// expandGrido
IntegerMatrix expandGrido(IntegerVector vec1, IntegerVector vec2);
RcppExport SEXP _testxyz1_expandGrido(SEXP vec1SEXP, SEXP vec2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type vec1(vec1SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type vec2(vec2SEXP);
    rcpp_result_gen = Rcpp::wrap(expandGrido(vec1, vec2));
    return rcpp_result_gen;
END_RCPP
}
// pairsearch10
List pairsearch10(IntegerVector a_positions, IntegerVector b_positions, IntegerVector a_sorted_values, IntegerVector b_sorted_values);
RcppExport SEXP _testxyz1_pairsearch10(SEXP a_positionsSEXP, SEXP b_positionsSEXP, SEXP a_sorted_valuesSEXP, SEXP b_sorted_valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type a_positions(a_positionsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type b_positions(b_positionsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type a_sorted_values(a_sorted_valuesSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type b_sorted_values(b_sorted_valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(pairsearch10(a_positions, b_positions, a_sorted_values, b_sorted_values));
    return rcpp_result_gen;
END_RCPP
}
// pairsearch11
List pairsearch11(IntegerVector a_positions, IntegerVector b_positions, IntegerVector a_sorted_values, IntegerVector b_sorted_values);
RcppExport SEXP _testxyz1_pairsearch11(SEXP a_positionsSEXP, SEXP b_positionsSEXP, SEXP a_sorted_valuesSEXP, SEXP b_sorted_valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type a_positions(a_positionsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type b_positions(b_positionsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type a_sorted_values(a_sorted_valuesSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type b_sorted_values(b_sorted_valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(pairsearch11(a_positions, b_positions, a_sorted_values, b_sorted_values));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_testxyz1_calculateXXw", (DL_FUNC) &_testxyz1_calculateXXw, 3},
    {"_testxyz1_maxLambda", (DL_FUNC) &_testxyz1_maxLambda, 1},
    {"_testxyz1_evaluate", (DL_FUNC) &_testxyz1_evaluate, 4},
    {"_testxyz1_vunion", (DL_FUNC) &_testxyz1_vunion, 2},
    {"_testxyz1_vintersection", (DL_FUNC) &_testxyz1_vintersection, 2},
    {"_testxyz1_vdifference", (DL_FUNC) &_testxyz1_vdifference, 2},
    {"_testxyz1_findActiveSet", (DL_FUNC) &_testxyz1_findActiveSet, 3},
    {"_testxyz1_sparsify", (DL_FUNC) &_testxyz1_sparsify, 3},
    {"_testxyz1_projectAndSparsify", (DL_FUNC) &_testxyz1_projectAndSparsify, 3},
    {"_testxyz1_aggressiveStep", (DL_FUNC) &_testxyz1_aggressiveStep, 6},
    {"_testxyz1_conservativeStep", (DL_FUNC) &_testxyz1_conservativeStep, 3},
    {"_testxyz1_update", (DL_FUNC) &_testxyz1_update, 6},
    {"_testxyz1_solve", (DL_FUNC) &_testxyz1_solve, 8},
    {"_testxyz1_sequential_solve", (DL_FUNC) &_testxyz1_sequential_solve, 8},
    {"_testxyz1_FibCpp0", (DL_FUNC) &_testxyz1_FibCpp0, 1},
    {"_testxyz1_findIndex", (DL_FUNC) &_testxyz1_findIndex, 2},
    {"_testxyz1_binaryToInt", (DL_FUNC) &_testxyz1_binaryToInt, 1},
    {"_testxyz1_sorted_index_vector", (DL_FUNC) &_testxyz1_sorted_index_vector, 1},
    {"_testxyz1_apply_permutation", (DL_FUNC) &_testxyz1_apply_permutation, 2},
    {"_testxyz1_combine", (DL_FUNC) &_testxyz1_combine, 2},
    {"_testxyz1_push", (DL_FUNC) &_testxyz1_push, 2},
    {"_testxyz1_find", (DL_FUNC) &_testxyz1_find, 2},
    {"_testxyz1_pair_search3", (DL_FUNC) &_testxyz1_pair_search3, 2},
    {"_testxyz1_findindexit", (DL_FUNC) &_testxyz1_findindexit, 2},
    {"_testxyz1_binarySearchIndex", (DL_FUNC) &_testxyz1_binarySearchIndex, 2},
    {"_testxyz1_pair_search6", (DL_FUNC) &_testxyz1_pair_search6, 2},
    {"_testxyz1_pair_search7", (DL_FUNC) &_testxyz1_pair_search7, 2},
    {"_testxyz1_groupt", (DL_FUNC) &_testxyz1_groupt, 3},
    {"_testxyz1_splitVectors", (DL_FUNC) &_testxyz1_splitVectors, 2},
    {"_testxyz1_group2", (DL_FUNC) &_testxyz1_group2, 3},
    {"_testxyz1_pair_search4", (DL_FUNC) &_testxyz1_pair_search4, 2},
    {"_testxyz1_test4", (DL_FUNC) &_testxyz1_test4, 2},
    {"_testxyz1_expandGrid", (DL_FUNC) &_testxyz1_expandGrid, 2},
    {"_testxyz1_pair_search8", (DL_FUNC) &_testxyz1_pair_search8, 2},
    {"_testxyz1_test3", (DL_FUNC) &_testxyz1_test3, 2},
    {"_testxyz1_cantor_map", (DL_FUNC) &_testxyz1_cantor_map, 1},
    {"_testxyz1_inverse_cantor_map", (DL_FUNC) &_testxyz1_inverse_cantor_map, 1},
    {"_testxyz1_normalizeL1", (DL_FUNC) &_testxyz1_normalizeL1, 1},
    {"_testxyz1_transformY", (DL_FUNC) &_testxyz1_transformY, 1},
    {"_testxyz1_uniformSampling", (DL_FUNC) &_testxyz1_uniformSampling, 4},
    {"_testxyz1_weightedSampling", (DL_FUNC) &_testxyz1_weightedSampling, 4},
    {"_testxyz1_getunique", (DL_FUNC) &_testxyz1_getunique, 1},
    {"_testxyz1_hadamard", (DL_FUNC) &_testxyz1_hadamard, 2},
    {"_testxyz1_inner_product", (DL_FUNC) &_testxyz1_inner_product, 2},
    {"_testxyz1_filter", (DL_FUNC) &_testxyz1_filter, 4},
    {"_testxyz1_generate_uniform_values", (DL_FUNC) &_testxyz1_generate_uniform_values, 3},
    {"_testxyz1_generate_random_projection", (DL_FUNC) &_testxyz1_generate_random_projection, 3},
    {"_testxyz1_binary_search_cpp", (DL_FUNC) &_testxyz1_binary_search_cpp, 2},
    {"_testxyz1_interaction_strength", (DL_FUNC) &_testxyz1_interaction_strength, 4},
    {"_testxyz1_find_pair_matches", (DL_FUNC) &_testxyz1_find_pair_matches, 2},
    {"_testxyz1_find_pair_matches2", (DL_FUNC) &_testxyz1_find_pair_matches2, 2},
    {"_testxyz1_strongest_pairs", (DL_FUNC) &_testxyz1_strongest_pairs, 5},
    {"_testxyz1_strongest_pairs_binary", (DL_FUNC) &_testxyz1_strongest_pairs_binary, 2},
    {"_testxyz1_cut", (DL_FUNC) &_testxyz1_cut, 1},
    {"_testxyz1_generateMatrix", (DL_FUNC) &_testxyz1_generateMatrix, 2},
    {"_testxyz1_random_binary_matrix", (DL_FUNC) &_testxyz1_random_binary_matrix, 2},
    {"_testxyz1_random_binary_vector", (DL_FUNC) &_testxyz1_random_binary_vector, 1},
    {"_testxyz1_go", (DL_FUNC) &_testxyz1_go, 2},
    {"_testxyz1_r", (DL_FUNC) &_testxyz1_r, 3},
    {"_testxyz1_rs", (DL_FUNC) &_testxyz1_rs, 3},
    {"_testxyz1_makeZ", (DL_FUNC) &_testxyz1_makeZ, 2},
    {"_testxyz1_equalpairs", (DL_FUNC) &_testxyz1_equalpairs, 5},
    {"_testxyz1_equalpairs2", (DL_FUNC) &_testxyz1_equalpairs2, 5},
    {"_testxyz1_expandGrido", (DL_FUNC) &_testxyz1_expandGrido, 2},
    {"_testxyz1_pairsearch10", (DL_FUNC) &_testxyz1_pairsearch10, 4},
    {"_testxyz1_pairsearch11", (DL_FUNC) &_testxyz1_pairsearch11, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_testxyz1(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
